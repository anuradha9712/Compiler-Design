#include<conio.h>
#include<string.h>
#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>
char opcode[9][6]={"STOP","ADD","SUB","MUL","MOVER","MOVEM","INC","STORE","CMP"};
int code[9]={1,2,3,4,5,6,7,8,9};
int opcode_sizes[]={1,1,1,1,5,5,1,5,5};
char pseudo[6][5]={"DB","DW","DD","RESB","RESW","RESDD"};
int pseudo_size[]={1,2,4,1,2,4};
 int i,j,n,o,count=0,p1;
 int loc=0,p=0;
 int flag=0;
 char str[10],sec_name[20],label_name[20],str1[100];
 FILE *fptr;
 int si=0;
 char g[4] = {'l', 'b', 'l'};
 char f[4]={'v','a','r'};
 int sc,ss=0,p;
struct symbol_table
{
  char name[10];
   char type[10];
   int size;
   int location;
   int section_id;
  
}sym[10];
struct section_table
{
 int no;
 char section[10];
 int size;
}sec[10];
  
void pass1()
{

 fptr=fopen("D:\\try.txt","r");
 if(!fptr)
  printf("cannot open file");
 fscanf(fptr,"%s",str);
     if(strcmp(str,"START")==0)
	 {  
	   /* printf("%s","start found\n");*/
	   if(fscanf(fptr,"%s",str))
	   {
   	    loc=atoi(str);
		ss=loc;
		}
	 
	 else 
	  { 
	    loc=0;
	    printf("%d",loc);
	    printf("\n");
	   }
	  
	 }  
 while(!feof(fptr))
 {
   flag=0;
   fscanf(fptr,"%s",str);
   n=strlen(str);
  
   for(i=0;i<9;i++)
    {
	  /* for opcodes*/
      if(strcmp(str,opcode[i])==0)
      {
       flag=1;
	   p1=loc;
	  
       loc+=opcode_sizes[i];
	   
	   fgets(str1,100,fptr);
	}
  }  
  if(strcmp(str,"Section")==0)
  {
   sc=loc;
   loc=ss;	
   fscanf(fptr,"%s",str);
   strcpy(sec[si].section,str);
   sec[si].no=si+1;
   flag=1;
   if(si!=0)
   {
	sec[si-1].size=sc-ss;
   }
   si++; 
  }
  else if(strcmp(str,"END")==0)
  {
   sec[si-1].size=loc-ss;
   flag=1;
  } 
  else
  {
    if(strstr(str,":")!=0)
    {/*label*/
	 for(j=0;j<strlen(str);j++)
 	 sym[p].name[j]=str[j];
	 for(j=0;j<strlen(g);j++)
 	   sym[p].type[j]=g[j];
	 sym[p].size=0;
	 sym[p].location=loc;
	 sym[p].section_id=si;
  	 p++;
	 flag=1;
    }

   if(flag!=1)
   { /* variable*/
     for(j=0;j<strlen(str);j++)
  	   sym[p].name[j]=str[j];
     fscanf(fptr,"%s",str);
     for(j=0;j<strlen(f);j++)
 	   sym[p].type[j]=f[j];
	 sym[p].location=loc;
    for(i=0;i<6;i++)
    { 	   
     if(strcmp(str,pseudo[i])==0)
     {
	     loc+=pseudo_size[i];
	  	 fgets(str1,10,fptr);
	     sym[p].size=pseudo_size[i];
	     break;
	 }
    }
    sym[p].section_id=si;
    p++;
   }
 }
}

 printf("%s","\n\t section table\n\n");
 printf("s.no");
 printf("\t");
 printf("%s"," Name");
 printf("\t");
 printf("\t");
 printf("%s","size");
 printf("   \n");
 for(i=0;i<si;i++)
 {
  printf("%d",sec[i].no);
  printf("\t");  
  printf(sec[i].section);
  printf("\t");
  printf("\t");
  printf("%d",sec[i].size);	   
  printf("\n"); 
 }
 printf("%s","\n\n\tsymbol table\n");
 printf("\n");
 printf("%s","Name");
 printf("\t");
 printf("%s","type");
 printf("\t");
 printf("%s","location");
 printf("\t");
 printf("%s","size");
 printf("\t");
 printf("%s","section_id");
 printf("\n");
for(i=0;i<p;i++)
 {
   printf(sym[i].name);
   printf("\t");
   printf(sym[i].type);
   printf("\t");
   printf("%d",sym[i].location);
   printf("\t\t");
   printf("%d",sym[i].size);
   printf("\t");
   printf("%d",sym[i].section_id);
   printf("\n"); 
 }
}
void pass2()
{ 
  int q,s;
   FILE * fwrite;
   int var,sp,lc,loc=100;
   char name[5],cmp[5],c;
   fwrite=fopen("D:\\try2.txt","w");
   
   fptr=fopen("D:\\try.txt","r");
   if(!fptr)
    printf("cannot open file");
	
   while(!feof(fptr))
   {  flag=0;
       fscanf(fptr,"%s",str);
        for(i=0;i<9;i++)
         {
	      /* for opcodes*/
           if(strcmp(str,opcode[i])==0)
           {  
              flag=1;
	          fprintf(fwrite,"%08x\t",loc);
              loc+=opcode_sizes[i];
			  fprintf(fwrite,"%08x",code[i]) ; 
			  q=fscanf(fptr,"%s%c",str,&c);
			  n=strlen(str);
			  if(c=='\n')
			  {
			   n=atoi(str);
			    if(n)
			    {
			     fprintf(fwrite,"%08x\n",atoi(str)) ; 
			    }
			  	else if(!n)
				{
				  for(i=0;i<5;i++)
				  {
				    if(strcmp(sym[i].name,str)==0)
					{
					 s=sym[i].location;
					 fprintf(fwrite,"%08x\n",s) ;
					}
				  }
				}
			  }
		  	  else if(c!='\n')
			   { 
				fscanf(fptr,"%s",str);
			    n=atoi(str);
				if(n)
				  fprintf(fwrite,"%08x\n",atoi(str)) ;
			    else if(!n)
			    {
				 for(i=0;i<5;i++)
				 {
				  if(strcmp(sym[i].name,str)==0)
			  	  {
					 s=sym[i].location;
					 fprintf(fwrite,"%08x\n",s) ;
				  }
				 }
				}
			  }
		}	 
     } 
  if(strcmp(str,"Section")==0)
  {
	loc=ss;
	flag=1;
  }
  else
  {
  if(strstr(str,":")!=0)
  {
	flag=1;
  }
  if(flag!=1)
  { /* variable*/ 
     for(i=0;i<6;i++)
      { 	 
        if(strcmp(str,pseudo[i])==0)
	     {  
			  fprintf(fwrite,"%08x\t",loc);
	          loc+=pseudo_size[i]; 
			  fscanf(fptr,"%s",str); 
			  if(isalpha('str')!=0)
			  {  
			     fprintf(fwrite,"%08x\n",atoi(str));
			  }
	           break;
	     }
      } 	      
  }	    
 } 
}
}     
int main()
{
 pass1();
 pass2();
}


===========output===========
         section table

s.no     Name           size
1       .data           27
2       .TEST           8


        symbol table

Name    type    location        size    section_id
L1:     lbl     100             0       1
C       var     110             4       1
L2:     lbl     114             0       1
B       var     105             1       2
A       var     106             2       2


Output of pass2-
00000064	0000000500000069
00000069	000000060000006a
0000006e	0000001b
00000072	000000080000006e
00000077	0000000200000001
00000078	0000000300000002
00000079	000000070000006a
0000007a	0000000800000005
00000064	0000000600000069
00000069	00000005
0000006a	00000003




